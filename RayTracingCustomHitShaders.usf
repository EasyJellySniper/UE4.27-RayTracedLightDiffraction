#include "/Engine/Private/Common.ush"
#include "RayTracingCommon.ush"
#include "RayTracingHitGroupCommon.ush"
#include "RayTracingCustomCommon.ush"

// fetch hit group material needs tessellation define
#ifdef USING_TESSELLATION
	#undef USING_TESSELLATION
	// Needed for VertexFactoryInterpolate
	#define USING_TESSELLATION 1
#endif

#include "/Engine/Generated/Material.ush"   
#include "/Engine/Generated/VertexFactory.ush"

// Mirrored from RayTracingMaterialHitShaders.usf
// This is how UE fetches material vertex data
void CalcInterpolants(in FRayCone RayCone, in FDefaultAttributes Attributes, out FVertexFactoryInterpolantsVSToPS Interpolants)
{
	FVertexFactoryInterpolantsVSToDS Interpolated = (FVertexFactoryInterpolantsVSToDS)0;

	float3 WorldPositions[3];
	float2 TexCoords[3];

	float3 Weights = float3(
		1 - Attributes.Barycentrics.x - Attributes.Barycentrics.y,
		Attributes.Barycentrics.x,
		Attributes.Barycentrics.y);

	for (int i = 0; i < 3; i++)
	{
		FVertexFactoryInput Input = LoadVertexFactoryInputForHGS(PrimitiveIndex(), i);
	
		FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
		float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);	
		float4 WorldPositionExcludingWPO = VertexFactoryGetWorldPosition(Input, VFIntermediates);
		FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPositionExcludingWPO.xyz, TangentToLocal);

		FVertexFactoryInterpolantsVSToDS PerVertexInterpolants = VertexFactoryGetInterpolantsVSToDS(Input, VFIntermediates, VertexParameters);
		Interpolated = VertexFactoryInterpolate(PerVertexInterpolants, Weights[i], Interpolated, 1.0);

		WorldPositions[i] = WorldPositionExcludingWPO.xyz;
		TexCoords[i] = VertexFactoryGetTextureCoordinateDS(PerVertexInterpolants);
	}

	Interpolants = VertexFactoryAssignInterpolants(Interpolated);

#if (NUM_TEX_COORD_INTERPOLATORS || USE_PARTICLE_SUBUVS) && !VERTEX_FACTORY_MODIFIES_TESSELLATION
	float2 TA = TexCoords[1] - TexCoords[0]; 
	float2 TB = TexCoords[2] - TexCoords[0];
    float UvArea = abs((TA.x * TB.y) - (TA.y * TB.x));

	float3 PA = WorldPositions[1] - WorldPositions[0];
	float3 PB = WorldPositions[2] - WorldPositions[0];
    float3 Unnormalized = cross(PB, PA);
	float InvWorldArea = rsqrt(dot(Unnormalized, Unnormalized));
    float3 FaceNormal = Unnormalized * InvWorldArea;
    
    float RayConeCapArea = RayCone.Width * RayCone.Width * (1.0f / (2.0f * PI));
    float3 RayDir = WorldRayDirection();
    float RaySlope = dot(RayDir, FaceNormal);
    const float SmallValue = 1.0 / 16777216.0;
    GlobalRayCone_TexArea = (UvArea * InvWorldArea * RayConeCapArea) / max(RaySlope * RaySlope, SmallValue);
    GlobalRayCone_TexArea = max(GlobalRayCone_TexArea, SmallValue);
#endif
}

RAY_TRACING_ENTRY_CLOSEST_HIT(CustomMaterialCHS,
	FPackedMaterialClosestHitPayload, PackedPayload,
	FDefaultAttributes, Attributes)
{
	PackedPayload.HitT = RayTCurrent();

#if USE_MATERIAL_CLOSEST_HIT_SHADER
	const uint2 PixelCoord = PackedPayload.GetPixelCoord();

	ResolvedView = ResolveView();

	FVertexFactoryInterpolantsVSToPS Interpolants;
	float4 SvPosition = float4(PixelCoord.xy, 0.0, 1.0);
	
	FRayCone PropagatedCone = PropagateRayCone(PackedPayload.GetRayCone(), 0 /* surface curvature */, RayTCurrent());
	CalcInterpolants(PropagatedCone, Attributes, Interpolants);

	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Interpolants, SvPosition);
	FPixelMaterialInputs PixelMaterialInputs;

	{
		float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
		float3 TranslatedWorldPosition = WorldRayOrigin() + WorldRayDirection() * RayTCurrent() + ResolvedView.PreViewTranslation.xyz;
		
		bool bIsFrontFace = HitKind() == HIT_KIND_TRIANGLE_FRONT_FACE;

		// #dxr_todo: UE-72130 support world position offset 
		// #if USE_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS
		// CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, BasePassInterpolants.PixelPositionExcludingWPO);
		// #else
		CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
		// #endif

		// store normal vector for use, for other data packing, referring PackRayTracingPayload function in RayTracingCommon.ush
		float3 WorldNormal = normalize(MaterialParameters.WorldNormal);
		PackedPayload.RadianceAndNormal[1] |= f32tof16(WorldNormal.x) << 16;
		PackedPayload.RadianceAndNormal[2]  = f32tof16(WorldNormal.y);
		PackedPayload.RadianceAndNormal[2] |= f32tof16(WorldNormal.z) << 16;
	}
#endif
	
	// store instance id to custom data
	#if MATERIALBLENDING_TRANSLUCENT
		PackedPayload.PackedCustomData = RAYTRACING_USE_WITH_LIGHT_DIFFRACTION;
	#endif
}